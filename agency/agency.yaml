AWSTemplateFormatVersion: '2010-09-09'
Description: "This template creates an S3 bucket for storing files for the specified agency and enables SFTP access for an agency user."

Parameters:
  # The name of the agency
  AgencyName:
    Type: String
    Description: The name of the agency
    AllowedPattern: '^[a-zA-Z0-9-]+$'

  PublicKey:
    Type: String
    Description: The public key of the agency
  
  MonitoringFrequency:
    Type: String
    Description: Choose between 'daily' or 'weekly' monitoring frequency
    AllowedValues:
      - daily
      - weekly
    Default: daily

Resources:
  # Define the S3 bucket with Transfer Acceleration and public access settings set to block public access
  AgencyS3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      AccelerateConfiguration:
        AccelerationStatus: 'Enabled'  # Enable Transfer Acceleration
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true  # Block public ACLs
        IgnorePublicAcls: true  # Ignore public ACLs
        BlockPublicPolicy: true  # Block public bucket policies
        RestrictPublicBuckets: true  # Restrict public bucket policies
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  
  S3LogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub '/aws/events/${AgencyName}'
      RetentionInDays: 14

  EventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub "EventBridge rule to trigger an SNS notification when an object is created in the S3 bucket for the agency ${AgencyName}."
      EventPattern: '{"source":["aws.s3"],"detail-type":["Object Created"]}'
      State: ENABLED
      Targets:
        - Id: !Sub 'Id${AWS::StackName}'
          Arn: !GetAtt S3LogGroup.Arn

  # The Bucket Activity Alarm will trigger an SNS notification if there has been on activity in the log group for the past 24 hours or 7 days, depending on the monitoring frequency.
  S3BucketActivityAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub 'Alarm if there has been no ${MonitoringFrequency} activity on the S3 bucket ${AgencyS3Bucket} for the agency ${AgencyName}.'
      ActionsEnabled: true
      MetricName: IncomingLogEvents
      Namespace: AWS/Logs
      Statistic: Sum
      Dimensions:
          - Name: LogGroupName
            Value: !Sub '/aws/events/${AgencyName}'
      Period: !If 
        - DailyCondition
        - 86400  # 24 hours in seconds for daily monitoring
        - 604800 # 7 days in seconds for weekly monitoring
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: LessThanOrEqualToThreshold
      TreatMissingData: breaching
      AlarmActions: 
         - !ImportValue data-ops-sns-topic-arn

  # Define the SFTP user
  AgencySFTPUser:
    Type: 'AWS::Transfer::User'
    Properties:
      UserName: !Sub '${AgencyName}'
      ServerId: !ImportValue sftp-server-id
      Role: !GetAtt TransferUserRole.Arn
      HomeDirectoryType: 'LOGICAL'
      HomeDirectoryMappings:
        - Entry: '/'
          Target: !Sub '/${AgencyS3Bucket}'
      SshPublicKeys:
        - !Ref PublicKey

  # Define the IAM Role for the SFTP user
  TransferUserRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'transfer.amazonaws.com'
            Action: 'sts:AssumeRole'
      Path: '/'
      RoleName: !Sub 'TransferUserRole-${AgencyName}'
      Policies:
        - PolicyName: 'TransferUserPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 's3:ListBucket'
                  - 's3:GetBucketLocation'
                  - 's3:GetBucketVersioning'
                  - 's3:PutObject'
                  - 's3:RestoreObject'
                  - 's3:GetObject'
                  - 's3:GetObjectAcl'
                  - 's3:DeleteObject'
                  - 's3:ListBucketMultipartUploads'
                  - 's3:MultipartUpload'
                  - 's3:AbortMultipartUpload'
                  - 's3:ListMultipartUploadParts'
                  - 's3:GetBucketPolicy'
                  - 's3:PutBucketPolicy'
                Resource: 
                  - !Sub 'arn:aws:s3:::${AgencyS3Bucket}'
                  - !Sub 'arn:aws:s3:::${AgencyS3Bucket}/*'

Conditions:
  DailyCondition: !Equals [!Ref MonitoringFrequency, daily]

Outputs:
  SFTPUserName:
    Description: 'The username for SFTP access.'
    Value: !Ref AgencySFTPUser
    Export:
      Name: !Sub '${AgencyName}-sftp-user-name'
  S3BucketName:
    Description: 'The name of the S3 bucket where files will be stored.'
    Value: !Ref AgencyS3Bucket
    Export:
      Name: !Sub '${AgencyName}-s3-bucket-name'
  S3BucketAcceleratedDomain:
    Description: 'The domain name for the accelerated endpoint of the S3 bucket.'
    Value: !Sub 'http://${AgencyS3Bucket}.s3-accelerate.amazonaws.com'
    Export:
      Name: !Sub '${AgencyName}-s3-bucket-accelerated-domain'
